
팩토리 메소드 패턴
  개념
    - 객체 생성을 서브클래스에서 담당하도록 위임하는 디자인 패턴이다.
    - 즉, 객체를 직접 생성하는 것이 아니라, 서브클래스에서 객체를 생성하는 메소드를 구현하여 객체 생성을 캡슐화하는 방법이다.
  
  구조
    - Product (제품, 인터페이스) : 객체 생성을 위한 공통 인터페이스 제공
    - ConcreteProduct (구체적인 제품 클래스) : 실제로 생성될 객체
    - Creator (추상 팩토리, 인터페이스 또는 추상 클래스) : 팩토리 메소드를 선언
    - ConcreteCreator (구체적인 팩토리 클래스) : 팩토리 메소드를 구현하여 객체 생성
      
  사용 이유
    - 객체 생성 로직을 캡슐화하여 코드의 유연성을 높이기 위해서입니다.
    - 객체 생성 로직을 숨기고 싶을 때 → 객체를 직접 생성하지 않고, 메소드를 통해 제공
    - 구체적인 클래스에 의존성을 줄이고 싶을 때 → 다형성을 이용하여 유연한 설계 가능
    - 새로운 객체를 쉽게 추가할 수 있도록 만들고 싶을 때 → 코드 변경 최소화 가능
  
  장단점
    장점
      - 객체 생성 코드의 중복 제거
      - OCP(Open-Closed Principle, 개방-폐쇄 원칙) 준수 → 새로운 객체를 추가할 때 기존 코드 수정 없이 확장 가능
      - SRP(Single Responsibility Principle, 단일 책임 원칙) 준수 → 객체 생성 책임과 사용 책임을 분리할 수 있음
      - 결합도(Dependency) 감소 → 구체적인 클래스를 직접 참조하지 않음으로써 유연한 구조 설계 가능
  
    단점
      - 클래스 수 증가 → 새로운 객체를 추가할 때 새로운 서브클래스가 필요할 수도 있음
      - 구현이 복잡할 수 있음 → 단순한 코드에서는 오히려 불필요한 복잡성을 초래할 가능성 있음
  
  적용 전후
    적용 전
        class Car {
            void drive() {
                System.out.println("Driving a car...");
            }
        }
        
        class Bike {
            void ride() {
                System.out.println("Riding a bike...");
            }
        }
        
        class VehicleFactory {
            static Object getVehicle(String type) {
                if (type.equalsIgnoreCase("Car")) {
                    return new Car();
                } else if (type.equalsIgnoreCase("Bike")) {
                    return new Bike();
                }
                return null;
            }
        }
        
        public class Main {
            public static void main(String[] args) {
                Car car = (Car) VehicleFactory.getVehicle("Car");
                car.drive();
                
                Bike bike = (Bike) VehicleFactory.getVehicle("Bike");
                bike.ride();
            }
        }
​
        문제점
          VehicleFactory가 Car, Bike와 강하게 결합되어 있어, 새로운 탈것을 추가할 때마다 if-else 문을 수정해야 함 → OCP 위반
          형변환((Car))이 필요하여 런타임 오류 발생 가능성 있음

            
        b.   적용 후
        // 1. Product 인터페이스 (Vehicle)
        interface Vehicle {
            void move();
        }
        
        // 2. Concrete Product (Car, Bike)
        class Car implements Vehicle {
            public void move() {
                System.out.println("Driving a car...");
            }
        }
        
        class Bike implements Vehicle {
            public void move() {
                System.out.println("Riding a bike...");
            }
        }
        
        // 3. Creator (추상 팩토리 클래스)
        abstract class VehicleFactory {
            abstract Vehicle createVehicle();
        }
        
        // 4. Concrete Creator (구체적인 팩토리 클래스)
        class CarFactory extends VehicleFactory {
            public Vehicle createVehicle() {
                return new Car();
            }
        }
        
        class BikeFactory extends VehicleFactory {
            public Vehicle createVehicle() {
                return new Bike();
            }
        }
        
        // 5. 클라이언트 코드 (팩토리 메소드 사용)
        public class Main {
            public static void main(String[] args) {
                VehicleFactory carFactory = new CarFactory();
                Vehicle car = carFactory.createVehicle();
                car.move();
        
                VehicleFactory bikeFactory = new BikeFactory();
                Vehicle bike = bikeFactory.createVehicle();
                bike.move();
            }
        }
